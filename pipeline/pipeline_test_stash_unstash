pipeline {
    agent any
    options {
      disableConcurrentBuilds()
      disableRestartFromStage()
      disableResume()
      quietPeriod 30
      timeout(activity: true, time: 15)
      ansiColor('xterm')
      buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '1', numToKeepStr: '5')
    }
    
    stages {
        stage('setup email') {
            steps {
                wrap([$class: 'BuildUser']) {
                  script {
                        env.EMAIL_TO=sh(returnStdout: true, script: "echo ${BUILD_USER_EMAIL} | sed 's/yahoo.com/gmail.com/' ")
                        env.APP_NAME= "python_test"       
                        sh 'printenv'
                  }
                }
              }
         }
        stage('CLONE  ansible repo') {
            steps {
                checkout changelog: false, 
                poll: false, 
                scm: scmGit(branches: [[name: '*/**']],
                extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'ansible'], localBranch('main')],
                userRemoteConfigs: [[credentialsId: 'GITHUB_TOKEN', url: 'https://github.com/mohammadsereshki/ansible.git']])
            }
        }
        stage('Clone python repo') {
            agent { label 'master' }
            steps {
                checkout changelog: false,
                poll: false,
                scm: scmGit(branches: [[name: '**']], 
                extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'python_test'], localBranch('uat')], 
                userRemoteConfigs: [[credentialsId: 'GITHUB_TOKEN', 
                url: 'https://github.com/mohammadsereshki/python_test.git']])
            }
        }
        stage('build docker and export') {
            agent { label 'master' }
            steps {
                sh "cd ${workspace}/python_test/deployment;docker build . -t ${APP_NAME}:${BUILD_ID};docker save ${APP_NAME}:${BUILD_ID} |gzip  > ${workspace}/${APP_NAME}_${BUILD_ID}.tgz"
                sh 'ls -l' 
                sh 'pwd'
                stash includes: "${APP_NAME}_${BUILD_ID}.tgz", name: 'Docker_image_file'
            }   
        }
        stage('unstash docker image file') {
            steps {
                
                unstash 'Docker_image_file'
                sh 'ls -l' 
                sh 'pwd'
                
            }   
        }
    }
}
