pipeline {
    agent any
    options {
      disableConcurrentBuilds()
      disableRestartFromStage()
      disableResume()
      quietPeriod 30
      timeout(activity: true, time: 15)
      ansiColor('xterm')
      buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '1', numToKeepStr: '5')
    }
    
    stages {
        stage('setup email') {
            steps {
                wrap([$class: 'BuildUser']) {
                  script {
                        env.EMAIL_TO=sh(returnStdout: true, script: "echo ${BUILD_USER_EMAIL} | sed 's/yahoo.com/gmail.com/' ")
                        env.APP_NAME= "python_test"       
                        env.APP_NAME_LOWER= env.APP_NAME.toLowerCase()
                        sh 'printenv'
                  }
                }
              }
         }
        stage('CLONE  ansible repo') {
            steps {
                checkout changelog: false, 
                poll: false, 
                scm: scmGit(branches: [[name: '*/**']],
                extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'ansible'], localBranch('main')],
                userRemoteConfigs: [[credentialsId: 'GITHUB_TOKEN', url: 'https://github.com/mohammadsereshki/ansible.git']])
            }
        }
        stage('Clone python repo') {
            agent { label 'master' }
            steps {
                checkout changelog: false,
                poll: false,
                scm: scmGit(branches: [[name: '**']], 
                extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'python_test'], localBranch('uat')], 
                userRemoteConfigs: [[credentialsId: 'GITHUB_TOKEN', 
                url: 'https://github.com/mohammadsereshki/python_test.git']])
            }
        }
        stage('build docker and export') {
            agent { label 'master' }
            steps {
                sh "cd ${workspace}/python_test/deployment;docker build . -t ${APP_NAME_LOWER}:${BUILD_ID};docker save ${APP_NAME_LOWER}:${BUILD_ID} |gzip  > ${workspace}/${APP_NAME_LOWER}_${BUILD_ID}.tgz;docker rmi -f ${APP_NAME_LOWER}:${BUILD_ID}"
                sh 'ls -l' 
                sh 'pwd'
                script {
                        env.DOCKER_FILE_MASTER="/home/jenkins/jenkins_data/workspace/pipeline_test_stash_unstash/${APP_NAME_LOWER}_${BUILD_ID}.tgz"
                        sh 'printenv'
                  }
                
            }   
        }
        stage('copy file from master jenkins to agent') {
            steps {
                
                withCredentials([usernamePassword(credentialsId: 'JENKINS_SERVER', passwordVariable: 'ANSIBLE_PASS', usernameVariable: 'ANSIBLE_USER')]) {       
                    sh """
                        echo "[jenkins]\n192.168.1.10\n[jenkins:vars]\nansible_ssh_common_args=\"-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null\" > inv.ini"
                        ansible jenkins -i inv.ini -m fetch -a "src=${DOCKER_FILE_MASTER} dest=${workspace} validate_checksum=false flat=true" -e "ansible_user=${ANSIBLE_USER}" -e "ansible_ssh_pass=${ANSIBLE_PASS}"
                    """
                }
                
            }   
        }
        stage('run ansible') {
            steps {
                ansiblePlaybook colorized: true,
                extras: '-e "jenkins_pipeline_path=${workspace}  DOCKER_IMAGE_TAG=${BUILD_ID}"',
                inventory: '${workspace}/ansible/inventory/capex_uat.ini',
                playbook: '${workspace}/ansible/docker_activity/main.yml',
                vaultCredentialsId: 'vault_pass', vaultTmpPath: ''
            }

        }


    }
    post {

        success {
            mail body: "<html><body><br>${env.JOB_NAME} Build # ${env.BUILD_NUMBER} - ${currentBuild.currentResult}:  <br> Check console output at ${env.BUILD_URL} to view the results. <br><br><br> </body></html>",
            cc: '', charset: 'UTF-8',  mimeType: 'text/html', subject: "${env.JOB_NAME} Build # ${env.BUILD_NUMBER} - ${currentBuild.currentResult}", to: "${env.EMAIL_TO}"
            
        }
        failure {
            mail bcc: '', body: "${env.JOB_NAME} Build # ${env.BUILD_NUMBER} - ${currentBuild.currentResult}: \n Check console output at ${env.BUILD_URL} to view the results.",
            cc: '', charset: 'UTF-8',  mimeType: 'text/html', replyTo: '', subject: "Jenkins build failed ${env.JOB_NAME} Build # ${env.BUILD_NUMBER} ", to: "${env.EMAIL_TO}"
             
        }
        unstable {
            mail bcc: '', body: "${env.JOB_NAME} Build # ${env.BUILD_NUMBER} - ${currentBuild.currentResult}: \n Check console output at ${env.BUILD_URL} to view the results.",
            cc: '', charset: 'UTF-8',  mimeType: 'text/html', replyTo: '', subject: "Jenkins build unstable: ${env.JOB_NAME} Build # ${env.BUILD_NUMBER} ", to: "${env.EMAIL_TO}"
             
        }
        always {
            cleanWs()
            node('master'){
                cleanWs()
            }
        }
    }
}
